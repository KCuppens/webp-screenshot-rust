name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    # Linux-specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxrandr-dev \
          libxfixes-dev \
          libxdamage-dev \
          libxext-dev \
          libxcomposite-dev \
          libwayland-dev \
          libwayland-cursor-dev \
          libegl1-mesa-dev \
          libgl1-mesa-dev \
          pkg-config \
          xvfb

    # macOS-specific setup
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        # Enable screen recording permissions for CI
        # Note: This might not work in GitHub Actions, tests may be skipped
        echo "macOS CI setup - some tests may be skipped due to permissions"

    # Windows-specific setup
    - name: Setup Windows
      if: runner.os == 'Windows'
      run: |
        # No special setup required for Windows
        echo "Windows CI setup complete"

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Build with all features
      run: cargo build --verbose --all-features

    - name: Run tests
      run: cargo test --verbose
      env:
        # Run with virtual display on Linux
        DISPLAY: :99

    - name: Run tests with all features
      run: cargo test --verbose --all-features
      env:
        DISPLAY: :99

    # Start virtual display for Linux
    - name: Start Xvfb
      if: runner.os == 'Linux'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Run integration tests
      run: cargo test --test integration --verbose
      env:
        DISPLAY: :99

    - name: Run doc tests
      run: cargo test --doc --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxrandr-dev \
          libxfixes-dev \
          libxdamage-dev \
          libxext-dev \
          libxcomposite-dev \
          pkg-config \
          xvfb

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Start Xvfb
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      env:
        DISPLAY: :99

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run security audit
      run: cargo audit

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxrandr-dev \
          libxfixes-dev \
          libxdamage-dev \
          libxext-dev \
          libxcomposite-dev \
          pkg-config \
          xvfb

    - name: Start Xvfb
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Run benchmarks
      run: |
        cargo bench --bench capture -- --output-format html
        cargo bench --bench encoding -- --output-format html
      env:
        DISPLAY: :99

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  ffi-test:
    name: FFI/C API Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxrandr-dev \
          libxfixes-dev \
          libxdamage-dev \
          libxext-dev \
          libxcomposite-dev \
          pkg-config \
          gcc \
          xvfb

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        # Install any required macOS build tools
        xcode-select --install 2>/dev/null || true

    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # MSVC should be available in GitHub Actions
        echo "Windows build tools should be available"

    - name: Build C API
      run: cargo build --features c-api --verbose

    - name: Test C API
      run: cargo test --features c-api --verbose
      env:
        DISPLAY: :99

    - name: Start Xvfb (Linux only)
      if: runner.os == 'Linux'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      uses: taiki-e/install-action@cross

    - name: Install Linux dependencies
      if: contains(matrix.target, 'linux')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cross compile
      run: cross build --target ${{ matrix.target }} --verbose

    - name: Cross compile with features
      run: cross build --target ${{ matrix.target }} --features c-api --verbose

  memory-safety:
    name: Memory Safety (Miri)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly with miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxrandr-dev \
          libxfixes-dev \
          pkg-config

    - name: Run miri
      run: |
        cargo miri setup
        # Run miri on safe subset (avoid system calls that miri can't handle)
        cargo miri test memory_pool -- --test-threads=1
      env:
        MIRIFLAGS: "-Zmiri-disable-isolation -Zmiri-ignore-leaks"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxrandr-dev \
          libxfixes-dev \
          pkg-config

    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"

    - name: Deploy documentation (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        cargo doc --all-features --no-deps
        echo '<meta http-equiv="refresh" content="0; url=webp_screenshot_rust">' > target/doc/index.html

    - name: Upload documentation
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/